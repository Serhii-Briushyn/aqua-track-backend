{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "AquaTrack API",
    "description": "Comprehensive API documentation for managing resources, including user authentication, contact management, and other related operations.",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://api.briushyn.dev"
    },
    {
      "url": "http://127.0.0.1:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Endpoints for user authentication, registration, and token management."
    },
    {
      "name": "Water",
      "description": "Endpoints for managing water consumption tracking and related data."
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register a new user",
        "operationId": "registerUser",
        "description": "Registers a new user with a unique email and hashed password.",
        "security": [],
        "requestBody": {
          "description": "User registration data.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password.",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully user registration.",
            "headers": {
              "Set-Cookie": {
                "example": "refreshToken=Uy%2BDTZ6%2FlEmOk7wETF4TiNTqC8nEJq6pvxq%2B9DiB, sessionId=j%3A%22677e1c08e9b66d3fe13f769a%22",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token for accessing protected resources.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "operationId": "loginUser",
        "description": "Logs in a user with valid credentials.",
        "security": [],
        "requestBody": {
          "description": "User credentials for login.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  },
                  "password": {
                    "type": "string",
                    "format": "password",
                    "description": "User's password.",
                    "example": "SecurePass123!"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in user.",
            "headers": {
              "Set-Cookie": {
                "example": "refreshToken=Uy%2BDTZ6%2FlEmOk7wETF4TiNTqC8nEJq6pvxq%2B9DiB, sessionId=j%3A%22677e1c08e9b66d3fe13f769a%22",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in an user!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "Access token for accessing protected resources.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user session",
        "operationId": "refreshUserSession",
        "description": "Refreshes the user session, generates a new access token, and updates cookies.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "description": "Bearer token containing the current (possibly expired) access token.",
            "schema": {
              "type": "string",
              "example": "Bearer jrHzFR20mDmYP+VB9KZTEslEjFyFkmoDFnOOZPUcU"
            }
          },
          {
            "name": "sessionId",
            "in": "cookie",
            "required": true,
            "description": "HttpOnly cookie containing the session ID for the current user session. It is used to identify the session in the database.",
            "schema": {
              "type": "string",
              "example": "j%3A%226772d59258e8aa0c0aaa751d%22"
            }
          },
          {
            "name": "refreshToken",
            "in": "cookie",
            "required": true,
            "description": "HttpOnly cookie containing the refresh token for generating a new access token. It is securely stored and not accessible via JavaScript.",
            "schema": {
              "type": "string",
              "example": "6IaBSvWhDkvVD0tRX0GGnFlf04iYvTM2C1Sw%2FhTl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully refreshed user session. New cookies are set in the response.",
            "headers": {
              "Set-Cookie": {
                "example": "refreshToken=Uy%2BDTZ6%2FlEmOk7wETF4TiNTqC8nEJq6pvxq%2B9DiB, sessionId=j%3A%22677e1c08e9b66d3fe13f769a%22",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed a session!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "description": "New access token for accessing protected resources.",
                          "example": "pJK+TbhNzRIz1BVL9rf4JXrvuYM4ecbdaoRf+22v"
                        },
                        "user": {
                          "$ref": "#/components/schemas/user"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "User logout",
        "operationId": "logoutUser",
        "description": "Logs the user out of the system by clearing session-related cookies.",
        "security": [],
        "parameters": [
          {
            "in": "cookie",
            "name": "sessionId",
            "description": "ID of the current user session.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "j%3A%226772d59258e8aa0c0aaa751d%22"
            }
          },
          {
            "in": "cookie",
            "name": "refreshToken",
            "description": "Refresh token for session renewal.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6IaBSvWhDkvVDOtRX0GGnFlf04iYvTM2C1Sw%2FhTl"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully logged out. No content returned."
          },
          "400": {
            "description": "Bad request. Missing or invalid session ID.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "description": "HTTP error status.",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "description": "Error message.",
                      "example": "Session ID is required"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/me": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Get user details",
        "operationId": "GetUserDetails",
        "description": "Retrieve details of the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User data retrieved successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/update-user": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update user details",
        "operationId": "UpdateUserDetails",
        "description": "Update details of the currently authenticated user, including their avatar.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "Avatar image file."
                  },
                  "name": {
                    "type": "string",
                    "description": "User's name.",
                    "minLength": 2,
                    "maxLength": 30
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address."
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "male",
                      "female"
                    ],
                    "description": "User's gender."
                  },
                  "weight": {
                    "type": "number",
                    "description": "User's weight in kg."
                  },
                  "activeHours": {
                    "type": "number",
                    "description": "Number of active hours per day."
                  },
                  "waterNorm": {
                    "type": "number",
                    "description": "Daily water consumption norm in liters."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully."
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/update-password": {
      "put": {
        "tags": [
          "Auth"
        ],
        "summary": "Update user password",
        "operationId": "UpdateUserPassword",
        "description": "Update the password of the currently authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "oldPassword": {
                    "type": "string",
                    "description": "Current password of the user."
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "New password for the user."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/count": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get total user count",
        "operationId": "GetUserCount",
        "description": "Retrieve the total number of users registered in the application.",
        "security": [],
        "responses": {
          "200": {
            "description": "User count retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Users count retrieved successfully."
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "userCount": {
                          "type": "integer",
                          "example": 12345
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send reset password email",
        "operationId": "sendResetPasswordEmail",
        "description": "Sends an email with a password reset link.",
        "security": [],
        "requestBody": {
          "description": "Email of the user requesting a password reset.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address.",
                    "example": "johndoe@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully sent password reset email.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "message",
                    "status",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Reset password email was successfully sent!"
                    },
                    "data": {
                      "type": "object",
                      "example": {}
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/google-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get Google OAuth URL",
        "operationId": "getGoogleOAuthUrl",
        "description": "Generates and returns the Google OAuth URL for user authorization.",
        "security": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved Google OAuth URL.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully get Google OAuth url!"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "Google OAuth 2.0 authorization URL.",
                          "example": "https://accounts.google.com/o/oauth2/v2/auth?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_REDIRECT_URI&scope=email%20profile&response_type=code"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water": {
      "post": {
        "tags": [
          "Water"
        ],
        "summary": "Create a new water consumption record",
        "description": "This endpoint allows users to create a new water consumption record.",
        "operationId": "createWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "amount"
                ],
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount of water consumed (in milliliters)",
                    "example": 4000
                  },
                  "norm": {
                    "type": "number",
                    "description": "User's daily water consumption norm (in milliliters)",
                    "example": 2000,
                    "default": 2000
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of water consumption",
                    "example": "2025-01-10T20:31:11.935Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Water consumption record successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a water!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/{id}": {
      "patch": {
        "tags": [
          "Water"
        ],
        "summary": "Update a water consumption record",
        "description": "This endpoint allows users to update an existing water consumption record.",
        "operationId": "updateWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique ID of the water record to update",
            "schema": {
              "type": "string",
              "example": "6781838fc9e96d2dc67690fd"
            }
          }
        ],
        "requestBody": {
          "description": "Fields to update. Provide at least one field.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "description": "Amount of water consumed (in milliliters)",
                    "example": 3500
                  },
                  "norm": {
                    "type": "number",
                    "description": "User's daily water consumption norm (in milliliters)",
                    "example": 2000
                  },
                  "date": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Date of water consumption",
                    "example": "2025-01-10T20:31:11.935Z"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Water consumption record successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully updated the water record!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/water"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Water"
        ],
        "summary": "Delete a water consumption record",
        "description": "This endpoint allows users to delete a water consumption record.",
        "operationId": "deleteWaterRecord",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The unique ID of the water record to delete",
            "schema": {
              "type": "string",
              "example": "6781838fc9e96d2dc67690fd"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Water consumption record successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/daily": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get daily water consumption data",
        "description": "This endpoint allows users to retrieve their daily water consumption data.",
        "operationId": "getDailyWaterConsumption",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "date",
            "required": true,
            "description": "The date for which to retrieve the water consumption data (ISO 8601 format)",
            "schema": {
              "type": "string",
              "example": "2025-01-10"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Daily water consumption data successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Daily water consumption data retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/water"
                      }
                    },
                    "totalAmount": {
                      "type": "number",
                      "example": 1500
                    },
                    "totalPercentage": {
                      "type": "number",
                      "example": 75
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/water/monthly": {
      "get": {
        "tags": [
          "Water"
        ],
        "summary": "Get monthly water consumption data",
        "description": "This endpoint allows users to retrieve their monthly water consumption data.",
        "operationId": "getMonthlyWaterConsumption",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "month",
            "required": true,
            "description": "The month for which to retrieve the water consumption data",
            "schema": {
              "type": "integer",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "year",
            "required": true,
            "description": "The year for which to retrieve the water consumption data",
            "schema": {
              "type": "integer",
              "example": 2025
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Monthly water consumption data successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Monthly water consumption data retrieved successfully."
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "date": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2025-01-01T00:00:00.000Z"
                          },
                          "amount": {
                            "type": "number",
                            "example": 2000
                          },
                          "percentage": {
                            "type": "number",
                            "example": 100
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "user": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "User's unique ID.",
            "example": "674c7ea11a75750f5f9b86d4"
          },
          "name": {
            "type": "string",
            "description": "User's full name.",
            "example": "John Doe",
            "default": "User"
          },
          "email": {
            "type": "string",
            "description": "User's email address.",
            "example": "johndoe@example.com"
          },
          "gender": {
            "type": "string",
            "description": "User's gender.",
            "enum": [
              "male",
              "female"
            ],
            "example": "male",
            "default": "female"
          },
          "weight": {
            "type": "number",
            "description": "User's weight in kilograms.",
            "example": 0,
            "default": 0
          },
          "activeHours": {
            "type": "number",
            "description": "User's daily active hours.",
            "example": 0,
            "default": 0
          },
          "waterNorm": {
            "type": "number",
            "description": "User's daily water consumption norm in milliliters.",
            "example": 0,
            "default": 0
          },
          "avatar": {
            "type": "string",
            "description": "URL of the user's avatar.",
            "example": "https://res.cloudinary.com/uqwgdu/image/upload/avatar.png"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was created (ISO 8601).",
            "example": "2024-12-01T12:34:56Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the user was last updated (ISO 8601).",
            "example": "2024-12-02T08:15:30Z"
          }
        }
      },
      "water": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Water consumption record ID",
            "example": "6781838fc9e96d2dc67690fd"
          },
          "amount": {
            "type": "number",
            "format": "float",
            "description": "Amount of water consumed",
            "example": 4000
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "description": "Date of water consumption (ISO 8601).",
            "example": "2025-01-10T20:31:11.935Z"
          },
          "norm": {
            "type": "number",
            "format": "float",
            "description": "Water norm for a given user in milliliters.",
            "example": 2000
          },
          "percentage": {
            "type": "number",
            "format": "float",
            "description": "Percentage of normal water consumption.",
            "example": 100
          },
          "owner": {
            "type": "string",
            "description": "ID of the owner of the water consumption record (link to the user).",
            "example": "60d21b4667d0d8992e610c85"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation time (ISO 8601).",
            "example": "2025-01-10T20:31:11.936Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Time when the record was last updated (ISO 8601).",
            "example": "2025-01-10T20:31:11.936Z"
          }
        }
      }
    },
    "responses": {
      "400": {
        "description": "Bad request due to invalid request body, incorrect contact ID format, or missing required session ID.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Invalid request body"
                        },
                        {
                          "example": "Invalid ID format"
                        },
                        {
                          "example": "Session ID is required"
                        },
                        {
                          "example": "The \"date\" query parameter is required."
                        },
                        {
                          "example": "The \"month\" and \"year\" query parameters are required."
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized access due to invalid or expired token, missing Authorization header, or session-related issues.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Access token expired"
                        },
                        {
                          "example": "Please provide Authorization header"
                        },
                        {
                          "example": "Auth header should be of type Bearer"
                        },
                        {
                          "example": "Session not found"
                        },
                        {
                          "example": "User not found"
                        },
                        {
                          "example": "Unauthorized"
                        },
                        {
                          "example": "Session token expired"
                        },
                        {
                          "example": "Token is invalid or expired"
                        },
                        {
                          "example": "Old password is incorrect"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Resource not found due to an invalid route, missing user, or missing contact in the system.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "oneOf": [
                        {
                          "example": "Route not found"
                        },
                        {
                          "example": "User not found"
                        },
                        {
                          "example": "Water record not found"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict due to a resource already existing or conflicting with current state.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "ConflictError"
                },
                "data": {
                  "type": "object",
                  "description": "Details about the error.",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Detailed error explanation.",
                      "example": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error.",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "error"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "description": "HTTP error status.",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "description": "General error name.",
                  "example": "Something went wrong"
                },
                "error": {
                  "type": "string",
                  "description": "Detailed explanation of the server-side error.",
                  "example": "Internal server error"
                }
              }
            }
          }
        }
      }
    }
  }
}